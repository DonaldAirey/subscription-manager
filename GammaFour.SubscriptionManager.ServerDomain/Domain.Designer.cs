// <auto-generated />
#pragma warning disable SA1402
#pragma warning disable SA1649
namespace GammaFour.SubscriptionManager.ServerDomain
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Transactions;
    using GammaFour.Data;
    using Microsoft.EntityFrameworkCore;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    ///A Buyer record.
    /// </summary>
    public class Buyer : IEnlistmentNotification, IVersionable<Buyer>
    {
        /// <summary>
        /// Default Subscription.
        /// </summary>
        private static readonly List<Subscription> defaultSubscriptions = new List<Subscription>();

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private BuyerSet buyers;

        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Buyer, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Buyer, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// Function to get child subscriptions.
        /// </summary>
        private Func<IEnumerable<Subscription>> getSubscriptions;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Buyer"/> class.
        /// </summary>
        public Buyer()
        {
            this.currentData = new object[15] { default(string), default(string), default(int), default(string), default(int), default(System.DateTime), default(System.DateTime), default(string), default(string), default(string), default(string), default(string), default(string), default(int?), default(byte[]) };
            this.State = RecordState.Detached;
            this.getSubscriptions = () => Buyer.defaultSubscriptions;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Buyer"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Buyer(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
            this.getSubscriptions = () => Buyer.defaultSubscriptions;
        }

        /// <summary>
        /// Gets or sets Address1.
        /// </summary>
        public string Address1
        {
            get
            {
                return this.currentData[0] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets Address2.
        /// </summary>
        public string Address2
        {
            get
            {
                return this.currentData[1] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets or sets BuyerId.
        /// </summary>
        public int BuyerId
        {
            get
            {
                return (int)this.currentData[2];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Buyer"/> records.
        /// </summary>
        public BuyerSet Buyers
        {
            get
            {
                return this.buyers;
            }
        }

        /// <summary>
        /// Gets or sets City.
        /// </summary>
        public string City
        {
            get
            {
                return this.currentData[3] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <summary>
        /// Gets the parent <see cref="Country"/> record.
        /// </summary>
        public Country Country
        {
            get
            {
                return this.Buyers?.CountryBuyerCountryIdKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets CountryId.
        /// </summary>
        public int CountryId
        {
            get
            {
                return (int)this.currentData[4];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[4] = value;
            }
        }

        /// <summary>
        /// Gets or sets DateCreated.
        /// </summary>
        public System.DateTime DateCreated
        {
            get
            {
                return (System.DateTime)this.currentData[5];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[5] = value;
            }
        }

        /// <summary>
        /// Gets or sets DateModified.
        /// </summary>
        public System.DateTime DateModified
        {
            get
            {
                return (System.DateTime)this.currentData[6];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[6] = value;
            }
        }

        /// <summary>
        /// Gets or sets Email.
        /// </summary>
        public string Email
        {
            get
            {
                return this.currentData[7] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[7] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets or sets Mnemonic.
        /// </summary>
        public string Mnemonic
        {
            get
            {
                return this.currentData[8] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[8] = value;
            }
        }

        /// <summary>
        /// Gets or sets Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData[9] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[9] = value;
            }
        }

        /// <summary>
        /// Gets or sets Phone.
        /// </summary>
        public string Phone
        {
            get
            {
                return this.currentData[10] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[10] = value;
            }
        }

        /// <summary>
        /// Gets or sets PostalCode.
        /// </summary>
        public string PostalCode
        {
            get
            {
                return this.currentData[11] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[11] = value;
            }
        }

        /// <summary>
        /// Gets or sets PrimaryContact.
        /// </summary>
        public string PrimaryContact
        {
            get
            {
                return this.currentData[12] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[12] = value;
            }
        }

        /// <summary>
        /// Gets the parent <see cref="Province"/> record.
        /// </summary>
        public Province Province
        {
            get
            {
                return this.Buyers?.ProvinceBuyerProvinceIdKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets ProvinceId.
        /// </summary>
        public int? ProvinceId
        {
            get
            {
                return (int?)this.currentData[13];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[13] = value;
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[14] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[14] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <summary>
        /// Gets the child <see cref="Subscription"/> records.
        /// </summary>
        public IEnumerable<Subscription> Subscriptions
        {
            get
            {
                return this.getSubscriptions();
            }

            set
            {
            }
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Buyer GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Buyer(Buyer.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="buyers">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(BuyerSet buyers)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = buyers == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = buyers == null ? RecordState.Detached : RecordState.Added;
            }

            if (buyers == null)
            {
                this.getSubscriptions = () => Buyer.defaultSubscriptions;
            }
            else
            {
                this.getSubscriptions = () => this.Buyers.Domain.Subscriptions.BuyerSubscriptionBuyerIdKey.GetChildren(this);
            }

            this.buyers = buyers;
        }
    }

    /// <summary>
    ///A Country record.
    /// </summary>
    public class Country : IEnlistmentNotification, IVersionable<Country>
    {
        /// <summary>
        /// Default Buyer.
        /// </summary>
        private static readonly List<Buyer> defaultBuyers = new List<Buyer>();

        /// <summary>
        /// Default Province.
        /// </summary>
        private static readonly List<Province> defaultProvinces = new List<Province>();

        /// <summary>
        /// Default Region.
        /// </summary>
        private static readonly List<Region> defaultRegions = new List<Region>();

        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Country, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Country, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private CountrySet countries;

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// Function to get child buyers.
        /// </summary>
        private Func<IEnumerable<Buyer>> getBuyers;

        /// <summary>
        /// Function to get child provinces.
        /// </summary>
        private Func<IEnumerable<Province>> getProvinces;

        /// <summary>
        /// Function to get child regions.
        /// </summary>
        private Func<IEnumerable<Region>> getRegions;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        public Country()
        {
            this.currentData = new object[4] { default(string), default(int), default(string), default(byte[]) };
            this.State = RecordState.Detached;
            this.getBuyers = () => Country.defaultBuyers;
            this.getProvinces = () => Country.defaultProvinces;
            this.getRegions = () => Country.defaultRegions;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Country(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
            this.getBuyers = () => Country.defaultBuyers;
            this.getProvinces = () => Country.defaultProvinces;
            this.getRegions = () => Country.defaultRegions;
        }

        /// <summary>
        /// Gets the child <see cref="Buyer"/> records.
        /// </summary>
        public IEnumerable<Buyer> Buyers
        {
            get
            {
                return this.getBuyers();
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Country"/> records.
        /// </summary>
        public CountrySet Countries
        {
            get
            {
                return this.countries;
            }
        }

        /// <summary>
        /// Gets or sets CountryCode.
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.currentData[0] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets CountryId.
        /// </summary>
        public int CountryId
        {
            get
            {
                return (int)this.currentData[1];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets or sets Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData[2] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets the child <see cref="Province"/> records.
        /// </summary>
        public IEnumerable<Province> Provinces
        {
            get
            {
                return this.getProvinces();
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets the child <see cref="Region"/> records.
        /// </summary>
        public IEnumerable<Region> Regions
        {
            get
            {
                return this.getRegions();
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[3] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Country GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Country(Country.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="countries">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(CountrySet countries)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = countries == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = countries == null ? RecordState.Detached : RecordState.Added;
            }

            if (countries == null)
            {
                this.getBuyers = () => Country.defaultBuyers;
                this.getProvinces = () => Country.defaultProvinces;
                this.getRegions = () => Country.defaultRegions;
            }
            else
            {
                this.getBuyers = () => this.Countries.Domain.Buyers.CountryBuyerCountryIdKey.GetChildren(this);
                this.getProvinces = () => this.Countries.Domain.Provinces.CountryProvinceKey.GetChildren(this);
                this.getRegions = () => this.Countries.Domain.Regions.CountryRegionKey.GetChildren(this);
            }

            this.countries = countries;
        }
    }

    /// <summary>
    ///A Offering record.
    /// </summary>
    public class Offering : IEnlistmentNotification, IVersionable<Offering>
    {
        /// <summary>
        /// Default Subscription.
        /// </summary>
        private static readonly List<Subscription> defaultSubscriptions = new List<Subscription>();

        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Offering, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Offering, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// Function to get child subscriptions.
        /// </summary>
        private Func<IEnumerable<Subscription>> getSubscriptions;

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private OfferingSet offerings;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Offering"/> class.
        /// </summary>
        public Offering()
        {
            this.currentData = new object[13] { default(int), default(double), default(System.DateTime), default(System.DateTime), default(string), default(decimal), default(decimal), default(decimal), default(System.DateTime), default(string), default(string), default(int), default(byte[]) };
            this.State = RecordState.Detached;
            this.getSubscriptions = () => Offering.defaultSubscriptions;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Offering"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Offering(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
            this.getSubscriptions = () => Offering.defaultSubscriptions;
        }

        /// <summary>
        /// Gets or sets Age.
        /// </summary>
        public int Age
        {
            get
            {
                return (int)this.currentData[0];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets Coupon.
        /// </summary>
        public double Coupon
        {
            get
            {
                return (double)this.currentData[1];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets or sets DateCreated.
        /// </summary>
        public System.DateTime DateCreated
        {
            get
            {
                return (System.DateTime)this.currentData[2];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets or sets DateModified.
        /// </summary>
        public System.DateTime DateModified
        {
            get
            {
                return (System.DateTime)this.currentData[3];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <summary>
        /// Gets or sets Description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.currentData[4] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[4] = value;
            }
        }

        /// <summary>
        /// Gets or sets FaceValue.
        /// </summary>
        public decimal FaceValue
        {
            get
            {
                return (decimal)this.currentData[5];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[5] = value;
            }
        }

        /// <summary>
        /// Gets or sets FicoScore.
        /// </summary>
        public decimal FicoScore
        {
            get
            {
                return (decimal)this.currentData[6];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[6] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets or sets MarketValue.
        /// </summary>
        public decimal MarketValue
        {
            get
            {
                return (decimal)this.currentData[7];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[7] = value;
            }
        }

        /// <summary>
        /// Gets or sets MaturityDate.
        /// </summary>
        public System.DateTime MaturityDate
        {
            get
            {
                return (System.DateTime)this.currentData[8];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[8] = value;
            }
        }

        /// <summary>
        /// Gets or sets Mnemonic.
        /// </summary>
        public string Mnemonic
        {
            get
            {
                return this.currentData[9] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[9] = value;
            }
        }

        /// <summary>
        /// Gets or sets Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData[10] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[10] = value;
            }
        }

        /// <summary>
        /// Gets or sets OfferingId.
        /// </summary>
        public int OfferingId
        {
            get
            {
                return (int)this.currentData[11];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[11] = value;
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Offering"/> records.
        /// </summary>
        public OfferingSet Offerings
        {
            get
            {
                return this.offerings;
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[12] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[12] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <summary>
        /// Gets the child <see cref="Subscription"/> records.
        /// </summary>
        public IEnumerable<Subscription> Subscriptions
        {
            get
            {
                return this.getSubscriptions();
            }

            set
            {
            }
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Offering GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Offering(Offering.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="offerings">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(OfferingSet offerings)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = offerings == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = offerings == null ? RecordState.Detached : RecordState.Added;
            }

            if (offerings == null)
            {
                this.getSubscriptions = () => Offering.defaultSubscriptions;
            }
            else
            {
                this.getSubscriptions = () => this.Offerings.Domain.Subscriptions.OfferingSubscriptionOfferingIdKey.GetChildren(this);
            }

            this.offerings = offerings;
        }
    }

    /// <summary>
    ///A Province record.
    /// </summary>
    public class Province : IEnlistmentNotification, IVersionable<Province>
    {
        /// <summary>
        /// Default Buyer.
        /// </summary>
        private static readonly List<Buyer> defaultBuyers = new List<Buyer>();

        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Province, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Province, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// Function to get child buyers.
        /// </summary>
        private Func<IEnumerable<Buyer>> getBuyers;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private ProvinceSet provinces;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Province"/> class.
        /// </summary>
        public Province()
        {
            this.currentData = new object[7] { default(string), default(int), default(string), default(int), default(int?), default(string), default(byte[]) };
            this.State = RecordState.Detached;
            this.getBuyers = () => Province.defaultBuyers;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Province"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Province(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
            this.getBuyers = () => Province.defaultBuyers;
        }

        /// <summary>
        /// Gets the child <see cref="Buyer"/> records.
        /// </summary>
        public IEnumerable<Buyer> Buyers
        {
            get
            {
                return this.getBuyers();
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets the parent <see cref="Country"/> record.
        /// </summary>
        public Country Country
        {
            get
            {
                return this.Provinces?.CountryProvinceKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets CountryCode.
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.currentData[0] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets CountryId.
        /// </summary>
        public int CountryId
        {
            get
            {
                return (int)this.currentData[1];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets or sets Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData[2] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets or sets ProvinceId.
        /// </summary>
        public int ProvinceId
        {
            get
            {
                return (int)this.currentData[3];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Province"/> records.
        /// </summary>
        public ProvinceSet Provinces
        {
            get
            {
                return this.provinces;
            }
        }

        /// <summary>
        /// Gets the parent <see cref="Region"/> record.
        /// </summary>
        public Region Region
        {
            get
            {
                return this.Provinces?.RegionProvinceRegionIdKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets RegionId.
        /// </summary>
        public int? RegionId
        {
            get
            {
                return (int?)this.currentData[4];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[4] = value;
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[6] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[6] = value;
            }
        }

        /// <summary>
        /// Gets or sets Short.
        /// </summary>
        public string Short
        {
            get
            {
                return this.currentData[5] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[5] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Province GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Province(Province.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="provinces">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(ProvinceSet provinces)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = provinces == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = provinces == null ? RecordState.Detached : RecordState.Added;
            }

            if (provinces == null)
            {
                this.getBuyers = () => Province.defaultBuyers;
            }
            else
            {
                this.getBuyers = () => this.Provinces.Domain.Buyers.ProvinceBuyerProvinceIdKey.GetChildren(this);
            }

            this.provinces = provinces;
        }
    }

    /// <summary>
    ///A Region record.
    /// </summary>
    public class Region : IEnlistmentNotification, IVersionable<Region>
    {
        /// <summary>
        /// Default Province.
        /// </summary>
        private static readonly List<Province> defaultProvinces = new List<Province>();

        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Region, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Region, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// Function to get child provinces.
        /// </summary>
        private Func<IEnumerable<Province>> getProvinces;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private RegionSet regions;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.currentData = new object[5] { default(string), default(int), default(string), default(int), default(byte[]) };
            this.State = RecordState.Detached;
            this.getProvinces = () => Region.defaultProvinces;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Region(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
            this.getProvinces = () => Region.defaultProvinces;
        }

        /// <summary>
        /// Gets the parent <see cref="Country"/> record.
        /// </summary>
        public Country Country
        {
            get
            {
                return this.Regions?.CountryRegionKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets CountryCode.
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.currentData[0] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets CountryId.
        /// </summary>
        public int CountryId
        {
            get
            {
                return (int)this.currentData[1];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets or sets Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData[2] as string;
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets the child <see cref="Province"/> records.
        /// </summary>
        public IEnumerable<Province> Provinces
        {
            get
            {
                return this.getProvinces();
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets RegionId.
        /// </summary>
        public int RegionId
        {
            get
            {
                return (int)this.currentData[3];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Region"/> records.
        /// </summary>
        public RegionSet Regions
        {
            get
            {
                return this.regions;
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[4] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[4] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Region GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Region(Region.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="regions">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(RegionSet regions)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = regions == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = regions == null ? RecordState.Detached : RecordState.Added;
            }

            if (regions == null)
            {
                this.getProvinces = () => Region.defaultProvinces;
            }
            else
            {
                this.getProvinces = () => this.Regions.Domain.Provinces.RegionProvinceRegionIdKey.GetChildren(this);
            }

            this.regions = regions;
        }
    }

    /// <summary>
    ///A Subscription record.
    /// </summary>
    public class Subscription : IEnlistmentNotification, IVersionable<Subscription>
    {
        /// <summary>
        /// Fast and dirty switch table for creating clones of the different versions of the current record.
        /// </summary>
        private static Dictionary<RecordVersion, Func<Subscription, object[]>> cloneVersions = new Dictionary<RecordVersion, Func<Subscription, object[]>> { { RecordVersion.Current, (c) => c.currentData }, { RecordVersion.Original, (c) => c.originalData }, { RecordVersion.Previous, (c) => c.previousData } };

        /// <summary>
        /// The current contents of the record.
        /// </summary>
        private object[] currentData;

        /// <summary>
        /// The original contents of the record.
        /// </summary>
        private object[] originalData;

        /// <summary>
        /// The previous contents of the record.
        /// </summary>
        private object[] previousData;

        /// <summary>
        /// The set to which this record belongs.
        /// </summary>
        private SubscriptionSet subscriptions;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// A table of transactions in which this object is enlisted.
        /// </summary>
        private HashSet<string> transactions = new HashSet<string>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription"/> class.
        /// </summary>
        public Subscription()
        {
            this.currentData = new object[5] { default(int), default(int), default(int), default(decimal), default(byte[]) };
            this.State = RecordState.Detached;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription"/> class.
        /// </summary>
        /// <param name="data">The data behind the properties.</param>
        private Subscription(object[] data)
        {
            this.currentData = data;
            this.State = RecordState.Detached;
        }

        /// <summary>
        /// Gets the parent <see cref="Buyer"/> record.
        /// </summary>
        public Buyer Buyer
        {
            get
            {
                return this.Subscriptions?.BuyerSubscriptionBuyerIdKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets BuyerId.
        /// </summary>
        public int BuyerId
        {
            get
            {
                return (int)this.currentData[0];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[0] = value;
            }
        }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the parent <see cref="Offering"/> record.
        /// </summary>
        public Offering Offering
        {
            get
            {
                return this.Subscriptions?.OfferingSubscriptionOfferingIdKey.GetParent(this);
            }

            set
            {
            }
        }

        /// <summary>
        /// Gets or sets OfferingId.
        /// </summary>
        public int OfferingId
        {
            get
            {
                return (int)this.currentData[1];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[1] = value;
            }
        }

        /// <summary>
        /// Gets or sets RowVersion.
        /// </summary>
        public byte[] RowVersion
        {
            get
            {
                return this.currentData[4] as byte[];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[4] = value;
            }
        }

        /// <summary>
        /// Gets the state of the record.
        /// </summary>
        public RecordState State { get; private set; }

        /// <summary>
        /// Gets or sets SubscriptionId.
        /// </summary>
        public int SubscriptionId
        {
            get
            {
                return (int)this.currentData[2];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[2] = value;
            }
        }

        /// <summary>
        /// Gets or sets the set of <see cref="Subscription"/> records.
        /// </summary>
        public SubscriptionSet Subscriptions
        {
            get
            {
                return this.subscriptions;
            }
        }

        /// <summary>
        /// Gets or sets SubscriptionValue.
        /// </summary>
        public decimal SubscriptionValue
        {
            get
            {
                return (decimal)this.currentData[3];
            }

            set
            {
                if (this.State == RecordState.Unchanged)
                {
                    this.State = this.State == RecordState.Added ? RecordState.Added : RecordState.Modified;
                    this.originalData = (object[])this.currentData.Clone();
                    this.previousData = (object[])this.currentData.Clone();
                }

                this.currentData[3] = value;
            }
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.previousData = this.originalData = null;
            enlistment.Done();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.State == RecordState.Unchanged)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            this.State = RecordState.Unchanged;
            this.currentData = this.originalData;
            this.originalData = this.previousData = null;
        }

        /// <summary>
        /// Creates a copy of the record.
        /// </summary>
        /// <param name="recordVersion">The version to be produced.</param>
        /// <returns>A copy of the record from the selected version.</returns>
        public Subscription GetVersion(RecordVersion recordVersion = RecordVersion.Current)
        {
            return new Subscription(Subscription.cloneVersions[recordVersion](this));
        }

        /// <summary>
        /// Marks a point in time when the record was consistent with it's indices.
        /// </summary>
        internal void Mark()
        {
            this.previousData = (object[])this.currentData.Clone();
        }

        /// <summary>
        /// Sets the parent record set.
        /// </summary>
        /// <param name="subscriptions">A set of records to which this record belongs (or null to leave a set).</param>
        internal void SetOwner(SubscriptionSet subscriptions)
        {
            if (this.State == RecordState.Unchanged)
            {
                this.State = subscriptions == null ? RecordState.Deleted : RecordState.Added;
                this.originalData = (object[])this.currentData.Clone();
                this.previousData = (object[])this.currentData.Clone();
            }

            if (this.State == RecordState.Detached)
            {
                this.State = subscriptions == null ? RecordState.Detached : RecordState.Added;
            }

            if (subscriptions == null)
            {
            }
            else
            {
            }

            this.subscriptions = subscriptions;
        }
    }

    /// <summary>
    /// A collection of <see cref="Buyer"/> records.
    /// </summary>
    public class BuyerSet : IEnlistmentNotification, IEnumerable<Buyer>, IMergable
    {
        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Buyer> collection = new SortedList<object, Buyer>();

        /// <summary>
        /// The CountryBuyerCountryIdKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Buyer, Country> countryBuyerCountryIdKey;

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Buyer, object> primaryKeyFunction = ((Expression<Func<Buyer, object>>)(b => b.BuyerId)).Compile();

        /// <summary>
        /// The ProvinceBuyerProvinceIdKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Buyer, Province> provinceBuyerProvinceIdKey;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="BuyerSet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public BuyerSet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Buyer>> RowChanging;

        /// <summary>
        /// Gets the BuyerExternalKey unique index.
        /// </summary>
        public UniqueKeyIndex<Buyer> BuyerExternalKey { get; } = new UniqueKeyIndex<Buyer>("BuyerExternalKey").HasIndex(b => b.Mnemonic);

        /// <summary>
        /// Gets the BuyerKey unique index.
        /// </summary>
        public UniqueKeyIndex<Buyer> BuyerKey { get; } = new UniqueKeyIndex<Buyer>("BuyerKey").HasIndex(b => b.BuyerId);

        /// <summary>
        /// Gets the CountryBuyerCountryIdKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Buyer, Country> CountryBuyerCountryIdKey
        {
            get
            {
                if (this.countryBuyerCountryIdKey == null)
                {
                    this.countryBuyerCountryIdKey = new ForeignKeyIndex<Buyer, Country>("CountryBuyerCountryIdKey", this.Domain.Countries.CountryKey).HasIndex(b => b.CountryId);
                }

                return this.countryBuyerCountryIdKey;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the ProvinceBuyerProvinceIdKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Buyer, Province> ProvinceBuyerProvinceIdKey
        {
            get
            {
                if (this.provinceBuyerProvinceIdKey == null)
                {
                    this.provinceBuyerProvinceIdKey = new ForeignKeyIndex<Buyer, Province>("ProvinceBuyerProvinceIdKey", this.Domain.Provinces.ProvinceKey).HasIndex(b => b.ProvinceId);
                }

                return this.provinceBuyerProvinceIdKey;
            }
        }

        /// <summary>
        /// Adds a <see cref="Buyer"/> to the set.
        /// </summary>
        /// <param name="buyer">The buyer to be added.</param>
        public void Add(Buyer buyer)
        {
            if (buyer.Address1 == null)
            {
                throw new ArgumentNullException(nameof(buyer.Address1));
            }

            if (buyer.City == null)
            {
                throw new ArgumentNullException(nameof(buyer.City));
            }

            if (buyer.Email == null)
            {
                throw new ArgumentNullException(nameof(buyer.Email));
            }

            if (buyer.Name == null)
            {
                throw new ArgumentNullException(nameof(buyer.Name));
            }

            if (buyer.Phone == null)
            {
                throw new ArgumentNullException(nameof(buyer.Phone));
            }

            if (buyer.PostalCode == null)
            {
                throw new ArgumentNullException(nameof(buyer.PostalCode));
            }

            object key = this.primaryKeyFunction(buyer);
            buyer.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, buyer);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.BuyerExternalKey.Add(buyer);
            this.BuyerKey.Add(buyer);
            this.CountryBuyerCountryIdKey.Add(buyer);
            this.ProvinceBuyerProvinceIdKey.Add(buyer);
            this.OnRecordChanging(DataAction.Add, null, buyer);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Buyer> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Buyer buyer in source)
            {
                if (!this.CountryBuyerCountryIdKey.HasParent(buyer))
                {
                    residuals.Add(buyer);
                    continue;
                }

                if (!this.ProvinceBuyerProvinceIdKey.HasParent(buyer))
                {
                    residuals.Add(buyer);
                    continue;
                }

                buyer.Enlist();
                buyer.Lock.EnterWriteLock();
                this.Add(buyer);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Buyer"/> from the set.
        /// </summary>
        /// <param name="buyer">The buyer to be added.</param>
        public void Remove(Buyer buyer)
        {
            object key = this.primaryKeyFunction(buyer);
            buyer.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, buyer));
            this.BuyerExternalKey.Remove(buyer);
            this.BuyerKey.Remove(buyer);
            this.CountryBuyerCountryIdKey.Remove(buyer);
            this.ProvinceBuyerProvinceIdKey.Remove(buyer);
            this.OnRecordChanging(DataAction.Delete, buyer, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Buyer"/> in the set.
        /// </summary>
        /// <param name="buyer">The buyer to be updated.</param>
        public void Update(Buyer buyer)
        {
            Buyer previousBuyer = buyer.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousBuyer);
            object newKey = this.primaryKeyFunction(buyer);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, buyer));
                }

                this.collection.Add(newKey, buyer);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.BuyerExternalKey.Update(buyer);
            this.BuyerKey.Update(buyer);
            this.CountryBuyerCountryIdKey.Update(buyer);
            this.ProvinceBuyerProvinceIdKey.Update(buyer);
            this.OnRecordChanging(DataAction.Delete, previousBuyer, buyer);
            buyer.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Buyer"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Buyer previous, Buyer current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Buyer> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A collection of <see cref="Country"/> records.
    /// </summary>
    public class CountrySet : IEnlistmentNotification, IEnumerable<Country>, IMergable
    {
        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Country> collection = new SortedList<object, Country>();

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Country, object> primaryKeyFunction = ((Expression<Func<Country, object>>)(c => c.CountryId)).Compile();

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public CountrySet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Country>> RowChanging;

        /// <summary>
        /// Gets the CountryExternalKey unique index.
        /// </summary>
        public UniqueKeyIndex<Country> CountryExternalKey { get; } = new UniqueKeyIndex<Country>("CountryExternalKey").HasIndex(c => c.CountryCode);

        /// <summary>
        /// Gets the CountryKey unique index.
        /// </summary>
        public UniqueKeyIndex<Country> CountryKey { get; } = new UniqueKeyIndex<Country>("CountryKey").HasIndex(c => c.CountryId);

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Adds a <see cref="Country"/> to the set.
        /// </summary>
        /// <param name="country">The country to be added.</param>
        public void Add(Country country)
        {
            if (country.CountryCode == null)
            {
                throw new ArgumentNullException(nameof(country.CountryCode));
            }

            if (country.Name == null)
            {
                throw new ArgumentNullException(nameof(country.Name));
            }

            object key = this.primaryKeyFunction(country);
            country.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, country);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.CountryExternalKey.Add(country);
            this.CountryKey.Add(country);
            this.OnRecordChanging(DataAction.Add, null, country);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Country> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Country country in source)
            {
                country.Enlist();
                country.Lock.EnterWriteLock();
                this.Add(country);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Country"/> from the set.
        /// </summary>
        /// <param name="country">The country to be added.</param>
        public void Remove(Country country)
        {
            object key = this.primaryKeyFunction(country);
            country.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, country));
            this.CountryExternalKey.Remove(country);
            this.CountryKey.Remove(country);
            this.OnRecordChanging(DataAction.Delete, country, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Country"/> in the set.
        /// </summary>
        /// <param name="country">The country to be updated.</param>
        public void Update(Country country)
        {
            Country previousCountry = country.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousCountry);
            object newKey = this.primaryKeyFunction(country);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, country));
                }

                this.collection.Add(newKey, country);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.CountryExternalKey.Update(country);
            this.CountryKey.Update(country);
            this.OnRecordChanging(DataAction.Delete, previousCountry, country);
            country.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Country"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Country previous, Country current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Country> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A collection of <see cref="Offering"/> records.
    /// </summary>
    public class OfferingSet : IEnlistmentNotification, IEnumerable<Offering>, IMergable
    {
        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Offering> collection = new SortedList<object, Offering>();

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Offering, object> primaryKeyFunction = ((Expression<Func<Offering, object>>)(o => o.OfferingId)).Compile();

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingSet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public OfferingSet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Offering>> RowChanging;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the OfferingExternalKey unique index.
        /// </summary>
        public UniqueKeyIndex<Offering> OfferingExternalKey { get; } = new UniqueKeyIndex<Offering>("OfferingExternalKey").HasIndex(o => o.Mnemonic);

        /// <summary>
        /// Gets the OfferingKey unique index.
        /// </summary>
        public UniqueKeyIndex<Offering> OfferingKey { get; } = new UniqueKeyIndex<Offering>("OfferingKey").HasIndex(o => o.OfferingId);

        /// <summary>
        /// Adds a <see cref="Offering"/> to the set.
        /// </summary>
        /// <param name="offering">The offering to be added.</param>
        public void Add(Offering offering)
        {
            if (offering.Description == null)
            {
                throw new ArgumentNullException(nameof(offering.Description));
            }

            if (offering.Name == null)
            {
                throw new ArgumentNullException(nameof(offering.Name));
            }

            object key = this.primaryKeyFunction(offering);
            offering.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, offering);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.OfferingExternalKey.Add(offering);
            this.OfferingKey.Add(offering);
            this.OnRecordChanging(DataAction.Add, null, offering);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Offering> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Offering offering in source)
            {
                offering.Enlist();
                offering.Lock.EnterWriteLock();
                this.Add(offering);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Offering"/> from the set.
        /// </summary>
        /// <param name="offering">The offering to be added.</param>
        public void Remove(Offering offering)
        {
            object key = this.primaryKeyFunction(offering);
            offering.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, offering));
            this.OfferingExternalKey.Remove(offering);
            this.OfferingKey.Remove(offering);
            this.OnRecordChanging(DataAction.Delete, offering, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Offering"/> in the set.
        /// </summary>
        /// <param name="offering">The offering to be updated.</param>
        public void Update(Offering offering)
        {
            Offering previousOffering = offering.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousOffering);
            object newKey = this.primaryKeyFunction(offering);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, offering));
                }

                this.collection.Add(newKey, offering);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.OfferingExternalKey.Update(offering);
            this.OfferingKey.Update(offering);
            this.OnRecordChanging(DataAction.Delete, previousOffering, offering);
            offering.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Offering"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Offering previous, Offering current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Offering> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A collection of <see cref="Province"/> records.
    /// </summary>
    public class ProvinceSet : IEnlistmentNotification, IEnumerable<Province>, IMergable
    {
        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Province> collection = new SortedList<object, Province>();

        /// <summary>
        /// The CountryProvinceKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Province, Country> countryProvinceKey;

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Province, object> primaryKeyFunction = ((Expression<Func<Province, object>>)(p => p.ProvinceId)).Compile();

        /// <summary>
        /// The RegionProvinceRegionIdKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Province, Region> regionProvinceRegionIdKey;

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceSet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public ProvinceSet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Province>> RowChanging;

        /// <summary>
        /// Gets the CountryProvinceKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Province, Country> CountryProvinceKey
        {
            get
            {
                if (this.countryProvinceKey == null)
                {
                    this.countryProvinceKey = new ForeignKeyIndex<Province, Country>("CountryProvinceKey", this.Domain.Countries.CountryKey).HasIndex(p => p.CountryId);
                }

                return this.countryProvinceKey;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the ProvinceExternalKey unique index.
        /// </summary>
        public UniqueKeyIndex<Province> ProvinceExternalKey { get; } = new UniqueKeyIndex<Province>("ProvinceExternalKey").HasIndex(p => ValueTuple.Create(p.Name, p.CountryCode));

        /// <summary>
        /// Gets the ProvinceKey unique index.
        /// </summary>
        public UniqueKeyIndex<Province> ProvinceKey { get; } = new UniqueKeyIndex<Province>("ProvinceKey").HasIndex(p => p.ProvinceId);

        /// <summary>
        /// Gets the RegionProvinceRegionIdKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Province, Region> RegionProvinceRegionIdKey
        {
            get
            {
                if (this.regionProvinceRegionIdKey == null)
                {
                    this.regionProvinceRegionIdKey = new ForeignKeyIndex<Province, Region>("RegionProvinceRegionIdKey", this.Domain.Regions.RegionKey).HasIndex(p => p.RegionId);
                }

                return this.regionProvinceRegionIdKey;
            }
        }

        /// <summary>
        /// Adds a <see cref="Province"/> to the set.
        /// </summary>
        /// <param name="province">The province to be added.</param>
        public void Add(Province province)
        {
            if (province.CountryCode == null)
            {
                throw new ArgumentNullException(nameof(province.CountryCode));
            }

            if (province.Name == null)
            {
                throw new ArgumentNullException(nameof(province.Name));
            }

            object key = this.primaryKeyFunction(province);
            province.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, province);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.ProvinceExternalKey.Add(province);
            this.ProvinceKey.Add(province);
            this.CountryProvinceKey.Add(province);
            this.RegionProvinceRegionIdKey.Add(province);
            this.OnRecordChanging(DataAction.Add, null, province);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Province> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Province province in source)
            {
                if (!this.CountryProvinceKey.HasParent(province))
                {
                    residuals.Add(province);
                    continue;
                }

                if (!this.RegionProvinceRegionIdKey.HasParent(province))
                {
                    residuals.Add(province);
                    continue;
                }

                province.Enlist();
                province.Lock.EnterWriteLock();
                this.Add(province);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Province"/> from the set.
        /// </summary>
        /// <param name="province">The province to be added.</param>
        public void Remove(Province province)
        {
            object key = this.primaryKeyFunction(province);
            province.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, province));
            this.ProvinceExternalKey.Remove(province);
            this.ProvinceKey.Remove(province);
            this.CountryProvinceKey.Remove(province);
            this.RegionProvinceRegionIdKey.Remove(province);
            this.OnRecordChanging(DataAction.Delete, province, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Province"/> in the set.
        /// </summary>
        /// <param name="province">The province to be updated.</param>
        public void Update(Province province)
        {
            Province previousProvince = province.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousProvince);
            object newKey = this.primaryKeyFunction(province);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, province));
                }

                this.collection.Add(newKey, province);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.ProvinceExternalKey.Update(province);
            this.ProvinceKey.Update(province);
            this.CountryProvinceKey.Update(province);
            this.RegionProvinceRegionIdKey.Update(province);
            this.OnRecordChanging(DataAction.Delete, previousProvince, province);
            province.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Province"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Province previous, Province current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Province> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A collection of <see cref="Region"/> records.
    /// </summary>
    public class RegionSet : IEnlistmentNotification, IEnumerable<Region>, IMergable
    {
        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Region> collection = new SortedList<object, Region>();

        /// <summary>
        /// The CountryRegionKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Region, Country> countryRegionKey;

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Region, object> primaryKeyFunction = ((Expression<Func<Region, object>>)(r => r.RegionId)).Compile();

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="RegionSet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public RegionSet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Region>> RowChanging;

        /// <summary>
        /// Gets the CountryRegionKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Region, Country> CountryRegionKey
        {
            get
            {
                if (this.countryRegionKey == null)
                {
                    this.countryRegionKey = new ForeignKeyIndex<Region, Country>("CountryRegionKey", this.Domain.Countries.CountryKey).HasIndex(r => r.CountryId);
                }

                return this.countryRegionKey;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the RegionExternalKey unique index.
        /// </summary>
        public UniqueKeyIndex<Region> RegionExternalKey { get; } = new UniqueKeyIndex<Region>("RegionExternalKey").HasIndex(r => ValueTuple.Create(r.Name, r.CountryCode));

        /// <summary>
        /// Gets the RegionKey unique index.
        /// </summary>
        public UniqueKeyIndex<Region> RegionKey { get; } = new UniqueKeyIndex<Region>("RegionKey").HasIndex(r => r.RegionId);

        /// <summary>
        /// Adds a <see cref="Region"/> to the set.
        /// </summary>
        /// <param name="region">The region to be added.</param>
        public void Add(Region region)
        {
            if (region.CountryCode == null)
            {
                throw new ArgumentNullException(nameof(region.CountryCode));
            }

            if (region.Name == null)
            {
                throw new ArgumentNullException(nameof(region.Name));
            }

            object key = this.primaryKeyFunction(region);
            region.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, region);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.RegionExternalKey.Add(region);
            this.RegionKey.Add(region);
            this.CountryRegionKey.Add(region);
            this.OnRecordChanging(DataAction.Add, null, region);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Region> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Region region in source)
            {
                if (!this.CountryRegionKey.HasParent(region))
                {
                    residuals.Add(region);
                    continue;
                }

                region.Enlist();
                region.Lock.EnterWriteLock();
                this.Add(region);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Region"/> from the set.
        /// </summary>
        /// <param name="region">The region to be added.</param>
        public void Remove(Region region)
        {
            object key = this.primaryKeyFunction(region);
            region.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, region));
            this.RegionExternalKey.Remove(region);
            this.RegionKey.Remove(region);
            this.CountryRegionKey.Remove(region);
            this.OnRecordChanging(DataAction.Delete, region, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Region"/> in the set.
        /// </summary>
        /// <param name="region">The region to be updated.</param>
        public void Update(Region region)
        {
            Region previousRegion = region.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousRegion);
            object newKey = this.primaryKeyFunction(region);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, region));
                }

                this.collection.Add(newKey, region);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.RegionExternalKey.Update(region);
            this.RegionKey.Update(region);
            this.CountryRegionKey.Update(region);
            this.OnRecordChanging(DataAction.Delete, previousRegion, region);
            region.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Region"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Region previous, Region current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Region> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A collection of <see cref="Subscription"/> records.
    /// </summary>
    public class SubscriptionSet : IEnlistmentNotification, IEnumerable<Subscription>, IMergable
    {
        /// <summary>
        /// The BuyerSubscriptionBuyerIdKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Subscription, Buyer> buyerSubscriptionBuyerIdKey;

        /// <summary>
        /// The collection of records.
        /// </summary>
        private SortedList<object, Subscription> collection = new SortedList<object, Subscription>();

        /// <summary>
        /// The OfferingSubscriptionOfferingIdKey foreign index.
        /// </summary>
        private ForeignKeyIndex<Subscription, Offering> offeringSubscriptionOfferingIdKey;

        /// <summary>
        /// Used to get the primary key from the record.
        /// </summary>
        private Func<Subscription, object> primaryKeyFunction = ((Expression<Func<Subscription, object>>)(s => s.SubscriptionId)).Compile();

        /// <summary>
        /// Private object used for locking.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The undo stack.
        /// </summary>
        private Stack<Action> undoStack = new Stack<Action>();

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionSet"/> class.
        /// </summary>
        /// <param name="domain">The data model.</param>
        /// <param name="name">The name of the set.</param>
        public SubscriptionSet(Domain domain, string name)
        {
            this.Domain = domain;
            this.Name = name;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<RecordChangeEventArgs<Subscription>> RowChanging;

        /// <summary>
        /// Gets the BuyerSubscriptionBuyerIdKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Subscription, Buyer> BuyerSubscriptionBuyerIdKey
        {
            get
            {
                if (this.buyerSubscriptionBuyerIdKey == null)
                {
                    this.buyerSubscriptionBuyerIdKey = new ForeignKeyIndex<Subscription, Buyer>("BuyerSubscriptionBuyerIdKey", this.Domain.Buyers.BuyerKey).HasIndex(s => s.BuyerId);
                }

                return this.buyerSubscriptionBuyerIdKey;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public Domain Domain { get; }

        /// <summary>
        /// Gets the lock used to manage multithreaded access to this record.
        /// </summary>
        public AsyncReaderWriterLock Lock { get; } = new AsyncReaderWriterLock();

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the OfferingSubscriptionOfferingIdKey foreign index.
        /// </summary>
        public ForeignKeyIndex<Subscription, Offering> OfferingSubscriptionOfferingIdKey
        {
            get
            {
                if (this.offeringSubscriptionOfferingIdKey == null)
                {
                    this.offeringSubscriptionOfferingIdKey = new ForeignKeyIndex<Subscription, Offering>("OfferingSubscriptionOfferingIdKey", this.Domain.Offerings.OfferingKey).HasIndex(s => s.OfferingId);
                }

                return this.offeringSubscriptionOfferingIdKey;
            }
        }

        /// <summary>
        /// Gets the SubscriptionKey unique index.
        /// </summary>
        public UniqueKeyIndex<Subscription> SubscriptionKey { get; } = new UniqueKeyIndex<Subscription>("SubscriptionKey").HasIndex(s => s.SubscriptionId);

        /// <summary>
        /// Adds a <see cref="Subscription"/> to the set.
        /// </summary>
        /// <param name="subscription">The subscription to be added.</param>
        public void Add(Subscription subscription)
        {
            object key = this.primaryKeyFunction(subscription);
            subscription.SetOwner(this);
            if (this.collection.ContainsKey(key))
            {
                throw new DuplicateKeyException(this.Name, key);
            }

            this.collection.Add(key, subscription);
            this.undoStack.Push(() => this.collection.Remove(key));
            this.SubscriptionKey.Add(subscription);
            this.BuyerSubscriptionBuyerIdKey.Add(subscription);
            this.OfferingSubscriptionOfferingIdKey.Add(subscription);
            this.OnRecordChanging(DataAction.Add, null, subscription);
        }

        /// <inheritdoc/>
        public void Commit(Enlistment enlistment)
        {
            this.undoStack.Clear();
            enlistment.Done();
        }

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public IEnumerator<Subscription> GetEnumerator()
        {
            return this.collection.Values.GetEnumerator();
        }

        /// <inheritdoc/>
        public void InDoubt(Enlistment enlistment)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IEnumerable<object> Merge(IEnumerable<object> source)
        {
            List<object> residuals = new List<object>();
            foreach (Subscription subscription in source)
            {
                if (!this.BuyerSubscriptionBuyerIdKey.HasParent(subscription))
                {
                    residuals.Add(subscription);
                    continue;
                }

                if (!this.OfferingSubscriptionOfferingIdKey.HasParent(subscription))
                {
                    residuals.Add(subscription);
                    continue;
                }

                subscription.Enlist();
                subscription.Lock.EnterWriteLock();
                this.Add(subscription);
            }

            return residuals;
        }

        /// <inheritdoc/>
        public void Prepare(PreparingEnlistment preparingEnlistment)
        {
            if (this.undoStack.Count == 0)
            {
                preparingEnlistment.Done();
            }
            else
            {
                preparingEnlistment.Prepared();
            }
        }

        /// <summary>
        /// Removes a <see cref="Subscription"/> from the set.
        /// </summary>
        /// <param name="subscription">The subscription to be added.</param>
        public void Remove(Subscription subscription)
        {
            object key = this.primaryKeyFunction(subscription);
            subscription.SetOwner(null);
            this.collection.Remove(key);
            this.undoStack.Push(() => this.collection.Add(key, subscription));
            this.SubscriptionKey.Remove(subscription);
            this.BuyerSubscriptionBuyerIdKey.Remove(subscription);
            this.OfferingSubscriptionOfferingIdKey.Remove(subscription);
            this.OnRecordChanging(DataAction.Delete, subscription, null);
        }

        /// <inheritdoc/>
        public void Rollback(Enlistment enlistment)
        {
            while (this.undoStack.Count != 0)
            {
                this.undoStack.Pop()();
            }
        }

        /// <summary>
        /// Updates a <see cref="Subscription"/> in the set.
        /// </summary>
        /// <param name="subscription">The subscription to be updated.</param>
        public void Update(Subscription subscription)
        {
            Subscription previousSubscription = subscription.GetVersion(RecordVersion.Previous);
            object oldKey = this.primaryKeyFunction(previousSubscription);
            object newKey = this.primaryKeyFunction(subscription);
            if (oldKey != null && !oldKey.Equals(newKey))
            {
                if (this.collection.Remove(oldKey))
                {
                    this.undoStack.Push(() => this.collection.Add(oldKey, subscription));
                }

                this.collection.Add(newKey, subscription);
                this.undoStack.Push(() => this.collection.Remove(newKey));
            }

            this.SubscriptionKey.Update(subscription);
            this.BuyerSubscriptionBuyerIdKey.Update(subscription);
            this.OfferingSubscriptionOfferingIdKey.Update(subscription);
            this.OnRecordChanging(DataAction.Delete, previousSubscription, subscription);
            subscription.Mark();
        }

        /// <summary>
        /// Handles a proposed change to the <see cref="Subscription"/> record.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="previous">The previous state of the record.</param>
        /// <param name="current">The current state of the record.</param>
        protected virtual void OnRecordChanging(DataAction dataAction, Subscription previous, Subscription current)
        {
            this.RowChanging?.Invoke(this, new RecordChangeEventArgs<Subscription> { DataAction = dataAction, Previous = previous, Current = current });
        }
    }

    /// <summary>
    /// A thread-safe, transaction-oriented data domain.
    /// </summary>
    public class Domain
    {
        /// <summary>
        /// Used to synchronize access to the housekeeping fields.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// Initializes a new instance of the <see cref="Domain"/> class.
        /// </summary>
        /// <param name="domainContext">The Entity Framework context.</param>
        public Domain(DomainContext domainContext)
        {
            this.Buyers = new BuyerSet(this, "Buyers");
            this.Countries = new CountrySet(this, "Countries");
            this.Offerings = new OfferingSet(this, "Offerings");
            this.Provinces = new ProvinceSet(this, "Provinces");
            this.Regions = new RegionSet(this, "Regions");
            this.Subscriptions = new SubscriptionSet(this, "Subscriptions");
            using (TransactionScope transactionScope = new TransactionScope())
            {
                this.Buyers.Enlist();
                this.Buyers.BuyerExternalKey.Enlist();
                this.Buyers.BuyerKey.Enlist();
                this.Buyers.CountryBuyerCountryIdKey.Enlist();
                this.Buyers.ProvinceBuyerProvinceIdKey.Enlist();
                this.Countries.Enlist();
                this.Countries.CountryExternalKey.Enlist();
                this.Countries.CountryKey.Enlist();
                this.Offerings.Enlist();
                this.Offerings.OfferingExternalKey.Enlist();
                this.Offerings.OfferingKey.Enlist();
                this.Provinces.Enlist();
                this.Provinces.ProvinceExternalKey.Enlist();
                this.Provinces.ProvinceKey.Enlist();
                this.Provinces.CountryProvinceKey.Enlist();
                this.Provinces.RegionProvinceRegionIdKey.Enlist();
                this.Regions.Enlist();
                this.Regions.RegionExternalKey.Enlist();
                this.Regions.RegionKey.Enlist();
                this.Regions.CountryRegionKey.Enlist();
                this.Subscriptions.Enlist();
                this.Subscriptions.SubscriptionKey.Enlist();
                this.Subscriptions.BuyerSubscriptionBuyerIdKey.Enlist();
                this.Subscriptions.OfferingSubscriptionOfferingIdKey.Enlist();
                this.Buyers.Lock.EnterWriteLock();
                this.Buyers.BuyerExternalKey.Lock.EnterWriteLock();
                this.Buyers.BuyerKey.Lock.EnterWriteLock();
                this.Buyers.CountryBuyerCountryIdKey.Lock.EnterWriteLock();
                this.Buyers.ProvinceBuyerProvinceIdKey.Lock.EnterWriteLock();
                this.Countries.Lock.EnterWriteLock();
                this.Countries.CountryExternalKey.Lock.EnterWriteLock();
                this.Countries.CountryKey.Lock.EnterWriteLock();
                this.Offerings.Lock.EnterWriteLock();
                this.Offerings.OfferingExternalKey.Lock.EnterWriteLock();
                this.Offerings.OfferingKey.Lock.EnterWriteLock();
                this.Provinces.Lock.EnterWriteLock();
                this.Provinces.ProvinceExternalKey.Lock.EnterWriteLock();
                this.Provinces.ProvinceKey.Lock.EnterWriteLock();
                this.Provinces.CountryProvinceKey.Lock.EnterWriteLock();
                this.Provinces.RegionProvinceRegionIdKey.Lock.EnterWriteLock();
                this.Regions.Lock.EnterWriteLock();
                this.Regions.RegionExternalKey.Lock.EnterWriteLock();
                this.Regions.RegionKey.Lock.EnterWriteLock();
                this.Regions.CountryRegionKey.Lock.EnterWriteLock();
                this.Subscriptions.Lock.EnterWriteLock();
                this.Subscriptions.SubscriptionKey.Lock.EnterWriteLock();
                this.Subscriptions.BuyerSubscriptionBuyerIdKey.Lock.EnterWriteLock();
                this.Subscriptions.OfferingSubscriptionOfferingIdKey.Lock.EnterWriteLock();
                Dictionary<IMergable, IEnumerable<object>> bucket = new Dictionary<IMergable, IEnumerable<object>>();
                bucket.Add(this.Buyers, this.Buyers.Merge(domainContext.Buyers));
                bucket.Add(this.Countries, this.Countries.Merge(domainContext.Countries));
                bucket.Add(this.Offerings, this.Offerings.Merge(domainContext.Offerings));
                bucket.Add(this.Provinces, this.Provinces.Merge(domainContext.Provinces));
                bucket.Add(this.Regions, this.Regions.Merge(domainContext.Regions));
                bucket.Add(this.Subscriptions, this.Subscriptions.Merge(domainContext.Subscriptions));
                while (bucket.Values.Where(v => v.Any()).Any())
                {
                    bucket[this.Buyers] = this.Buyers.Merge(bucket[this.Buyers]);
                    bucket[this.Countries] = this.Countries.Merge(bucket[this.Countries]);
                    bucket[this.Offerings] = this.Offerings.Merge(bucket[this.Offerings]);
                    bucket[this.Provinces] = this.Provinces.Merge(bucket[this.Provinces]);
                    bucket[this.Regions] = this.Regions.Merge(bucket[this.Regions]);
                    bucket[this.Subscriptions] = this.Subscriptions.Merge(bucket[this.Subscriptions]);
                }

                transactionScope.Complete();
            }
        }

        /// <summary>
        /// Gets the set of Buyer records.
        /// </summary>
        public BuyerSet Buyers { get; }

        /// <summary>
        /// Gets the set of Country records.
        /// </summary>
        public CountrySet Countries { get; }

        /// <summary>
        /// Gets the set of Offering records.
        /// </summary>
        public OfferingSet Offerings { get; }

        /// <summary>
        /// Gets the set of Province records.
        /// </summary>
        public ProvinceSet Provinces { get; }

        /// <summary>
        /// Gets the set of Region records.
        /// </summary>
        public RegionSet Regions { get; }

        /// <summary>
        /// Gets the set of Subscription records.
        /// </summary>
        public SubscriptionSet Subscriptions { get; }
    }

    /// <summary>
    /// The DbContext used to access the persistent store for the Domain domain.
    /// </summary>
    public class DomainContext : DbContext
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain"/> class.
        /// </summary>
        /// <param name="contextOptions">The options for bulding the DbContext.</param>
        public DomainContext(DbContextOptions<DomainContext> contextOptions) : base(contextOptions)
        {
        }

        /// <summary>
        /// Gets or sets the <see cref="Buyer"/> set.
        /// </summary>
        virtual public DbSet<Buyer> Buyers { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Country"/> set.
        /// </summary>
        virtual public DbSet<Country> Countries { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Offering"/> set.
        /// </summary>
        virtual public DbSet<Offering> Offerings { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Province"/> set.
        /// </summary>
        virtual public DbSet<Province> Provinces { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Region"/> set.
        /// </summary>
        virtual public DbSet<Region> Regions { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Subscription"/> set.
        /// </summary>
        virtual public DbSet<Subscription> Subscriptions { get; set; }

        /// <inheritdoc/>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Buyer>().Property(b => b.Address1).IsRequired().HasMaxLength(128);
            modelBuilder.Entity<Buyer>().Property(b => b.Address2).HasMaxLength(128);
            modelBuilder.Entity<Buyer>().Property(b => b.BuyerId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Buyer>().Property(b => b.City).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Buyer>().Property(b => b.CountryId).IsRequired();
            modelBuilder.Entity<Buyer>().Property(b => b.DateCreated).IsRequired();
            modelBuilder.Entity<Buyer>().Property(b => b.DateModified).IsRequired();
            modelBuilder.Entity<Buyer>().Property(b => b.Email).IsRequired().HasMaxLength(128);
            modelBuilder.Entity<Buyer>().Property(b => b.Mnemonic).HasMaxLength(32);
            modelBuilder.Entity<Buyer>().Property(b => b.Name).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Buyer>().Property(b => b.Phone).IsRequired().HasMaxLength(32);
            modelBuilder.Entity<Buyer>().Property(b => b.PostalCode).IsRequired().HasMaxLength(16);
            modelBuilder.Entity<Buyer>().Property(b => b.PrimaryContact).HasMaxLength(128);
            modelBuilder.Entity<Buyer>().Property(b => b.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Buyer>().Ignore(b => b.Buyers).Ignore(b => b.State).Ignore(b => b.Country).Ignore(b => b.Province).Ignore(b => b.Subscriptions);
            modelBuilder.Entity<Buyer>().HasIndex(b => b.Mnemonic).IsUnique();
            modelBuilder.Entity<Buyer>().HasKey(b => b.BuyerId);
            modelBuilder.Entity<Buyer>().HasOne<Country>().WithMany().HasForeignKey(b => b.CountryId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Buyer>().HasOne<Province>().WithMany().HasForeignKey(b => b.ProvinceId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Country>().Property(c => c.CountryCode).IsRequired().HasMaxLength(2);
            modelBuilder.Entity<Country>().Property(c => c.CountryId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Country>().Property(c => c.Name).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Country>().Property(c => c.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Country>().Ignore(c => c.Countries).Ignore(c => c.State).Ignore(c => c.Buyers).Ignore(c => c.Provinces).Ignore(c => c.Regions);
            modelBuilder.Entity<Country>().HasIndex(c => c.CountryCode).IsUnique();
            modelBuilder.Entity<Country>().HasKey(c => c.CountryId);
            modelBuilder.Entity<Offering>().Property(o => o.Age).IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.Coupon).IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.DateCreated).IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.DateModified).IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.Description).IsRequired().HasMaxLength(256);
            modelBuilder.Entity<Offering>().Property(o => o.FaceValue).HasColumnType("decimal(18,2)").IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.FicoScore).HasColumnType("decimal(18,2)").IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.MarketValue).HasColumnType("decimal(18,2)").IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.MaturityDate).IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.Mnemonic).HasMaxLength(32);
            modelBuilder.Entity<Offering>().Property(o => o.Name).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Offering>().Property(o => o.OfferingId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Offering>().Property(o => o.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Offering>().Ignore(o => o.Offerings).Ignore(o => o.State).Ignore(o => o.Subscriptions);
            modelBuilder.Entity<Offering>().HasIndex(o => o.Mnemonic).IsUnique();
            modelBuilder.Entity<Offering>().HasKey(o => o.OfferingId);
            modelBuilder.Entity<Province>().Property(p => p.CountryCode).IsRequired().HasMaxLength(2);
            modelBuilder.Entity<Province>().Property(p => p.CountryId).IsRequired();
            modelBuilder.Entity<Province>().Property(p => p.Name).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Province>().Property(p => p.ProvinceId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Province>().Property(p => p.Short).HasMaxLength(32);
            modelBuilder.Entity<Province>().Property(p => p.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Province>().Ignore(p => p.Provinces).Ignore(p => p.State).Ignore(p => p.Country).Ignore(p => p.Region).Ignore(p => p.Buyers);
            modelBuilder.Entity<Province>().HasIndex(p => new { p.Name, p.CountryCode }).IsUnique();
            modelBuilder.Entity<Province>().HasKey(p => p.ProvinceId);
            modelBuilder.Entity<Province>().HasOne<Country>().WithMany().HasForeignKey(p => p.CountryId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Province>().HasOne<Region>().WithMany().HasForeignKey(p => p.RegionId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Region>().Property(r => r.CountryCode).IsRequired().HasMaxLength(2);
            modelBuilder.Entity<Region>().Property(r => r.CountryId).IsRequired();
            modelBuilder.Entity<Region>().Property(r => r.Name).IsRequired().HasMaxLength(64);
            modelBuilder.Entity<Region>().Property(r => r.RegionId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Region>().Property(r => r.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Region>().Ignore(r => r.Regions).Ignore(r => r.State).Ignore(r => r.Country).Ignore(r => r.Provinces);
            modelBuilder.Entity<Region>().HasIndex(r => new { r.Name, r.CountryCode }).IsUnique();
            modelBuilder.Entity<Region>().HasKey(r => r.RegionId);
            modelBuilder.Entity<Region>().HasOne<Country>().WithMany().HasForeignKey(r => r.CountryId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Subscription>().Property(s => s.BuyerId).IsRequired();
            modelBuilder.Entity<Subscription>().Property(s => s.OfferingId).IsRequired();
            modelBuilder.Entity<Subscription>().Property(s => s.SubscriptionId).ValueGeneratedOnAdd().IsRequired();
            modelBuilder.Entity<Subscription>().Property(s => s.SubscriptionValue).HasColumnType("decimal(18,2)").IsRequired();
            modelBuilder.Entity<Subscription>().Property(s => s.RowVersion).IsRowVersion().IsRequired();
            modelBuilder.Entity<Subscription>().Ignore(s => s.Subscriptions).Ignore(s => s.State).Ignore(s => s.Buyer).Ignore(s => s.Offering);
            modelBuilder.Entity<Subscription>().HasKey(s => s.SubscriptionId);
            modelBuilder.Entity<Subscription>().HasOne<Buyer>().WithMany().HasForeignKey(s => s.BuyerId).OnDelete(DeleteBehavior.Restrict);
            modelBuilder.Entity<Subscription>().HasOne<Offering>().WithMany().HasForeignKey(s => s.OfferingId).OnDelete(DeleteBehavior.Restrict);
        }
    }
}
#pragma warning disable SA1402
#pragma warning disable SA1649
