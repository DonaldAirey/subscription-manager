// <auto-generated />
namespace GammaFour.SubscriptionManager.ServerDomain.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Transactions;
    using GammaFour.Data;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Configuration;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Controller for <see cref="Buyer"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class BuyersController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuyersController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public BuyersController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes a specific <see cref="Buyer"/> record.
        /// </summary>
        /// <param name="buyerId">The BuyerId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{buyerId}")]
        public async Task<IActionResult> DeleteBuyer([FromRoute] int buyerId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Buyer buyer = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    buyer = this.domain.Buyers.BuyerKey.Find(buyerId);
                }
                finally
                {
                    this.domain.Buyers.BuyerKey.Lock.ExitReadLock();
                }

                if (buyer == null)
                {
                    return this.NotFound();
                }

                this.domain.Buyers.Enlist();
                this.domain.Buyers.BuyerExternalKey.Enlist();
                this.domain.Buyers.BuyerKey.Enlist();
                this.domain.Buyers.CountryBuyerCountryIdKey.Enlist();
                this.domain.Buyers.ProvinceBuyerProvinceIdKey.Enlist();
                await this.domain.Buyers.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.CountryBuyerCountryIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.ProvinceBuyerProvinceIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                buyer.Enlist();
                await buyer.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Buyers.Remove(buyer);
                try
                {
                    this.domainContext.Buyers.Remove(buyer);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Buyer"/> record.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("buyerExternalKey/{mnemonic}")]
        public async Task<IActionResult> DeleteBuyerByBuyerExternalKey([FromRoute] string mnemonic)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Buyer buyer = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Buyers.BuyerExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    buyer = this.domain.Buyers.BuyerExternalKey.Find(mnemonic);
                }
                finally
                {
                    this.domain.Buyers.BuyerExternalKey.Lock.ExitReadLock();
                }

                if (buyer == null)
                {
                    return this.NotFound();
                }

                this.domain.Buyers.Enlist();
                this.domain.Buyers.BuyerExternalKey.Enlist();
                this.domain.Buyers.BuyerKey.Enlist();
                this.domain.Buyers.CountryBuyerCountryIdKey.Enlist();
                this.domain.Buyers.ProvinceBuyerProvinceIdKey.Enlist();
                await this.domain.Buyers.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.CountryBuyerCountryIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.ProvinceBuyerProvinceIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                buyer.Enlist();
                await buyer.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Buyers.Remove(buyer);
                try
                {
                    this.domainContext.Buyers.Remove(buyer);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
            }
        }

        /// <summary>
        /// Deletes all the <see cref="Buyer"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteBuyers()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Buyers.Enlist();
                this.domain.Buyers.BuyerExternalKey.Enlist();
                this.domain.Buyers.BuyerKey.Enlist();
                this.domain.Buyers.CountryBuyerCountryIdKey.Enlist();
                this.domain.Buyers.ProvinceBuyerProvinceIdKey.Enlist();
                await this.domain.Buyers.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.CountryBuyerCountryIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.ProvinceBuyerProvinceIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Buyer buyer in this.domain.Buyers.ToList())
                    {
                        await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Buyers.Remove(buyer);
                        this.domainContext.Buyers.Remove(buyer);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Buyer"/> record.
        /// </summary>
        /// <param name="buyerId">The BuyerId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{buyerId}")]
        public async Task<IActionResult> GetBuyer([FromRoute] int buyerId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Buyer buyer = this.domain.Buyers.BuyerKey.Find(buyerId);
                if (buyer == null)
                {
                    return this.NotFound();
                }

                await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Buyer"/> record.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("buyerExternalKey/{mnemonic}")]
        public async Task<IActionResult> GetBuyerByBuyerExternalKey([FromRoute] string mnemonic)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Buyers.BuyerExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Buyer buyer = this.domain.Buyers.BuyerExternalKey.Find(mnemonic);
                if (buyer == null)
                {
                    return this.NotFound();
                }

                await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Buyer"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Buyer"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetBuyers()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> buyers = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Buyers.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Buyer buyer in this.domain.Buyers)
                {
                    await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    buyers.Add(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
                }

                return this.Ok(buyers);
            }
        }

        /// <summary>
        /// Put the <see cref="Buyer"/> record into the domain.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <param name="jObject">The JSON record.</param>
        /// <returns>The result of the PUT verb.</returns>
        [HttpPut("buyerExternalKey/{mnemonic}")]
        public async Task<IActionResult> PutBuyerByBuyerExternalKey([FromRoute] string mnemonic, [FromBody] JObject jObject)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                Buyer buyer = null;
                try
                {
                    await this.domain.Buyers.BuyerExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    buyer = this.domain.Buyers.BuyerExternalKey.Find(mnemonic);
                }
                finally
                {
                    this.domain.Buyers.BuyerExternalKey.Lock.ExitReadLock();
                }

                try
                {
                    this.domain.Buyers.Enlist();
                    this.domain.Buyers.BuyerExternalKey.Enlist();
                    this.domain.Buyers.BuyerKey.Enlist();
                    this.domain.Buyers.CountryBuyerCountryIdKey.Enlist();
                    this.domain.Buyers.ProvinceBuyerProvinceIdKey.Enlist();
                    await this.domain.Buyers.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Buyers.BuyerExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Buyers.BuyerKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Buyers.CountryBuyerCountryIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Buyers.ProvinceBuyerProvinceIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.ProvinceExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    var countryIdObject = jObject.GetValue("countryId", StringComparison.InvariantCulture) as JObject;
                    if (countryIdObject != null)
                    {
                        Country country = null;
                        var countryExternalKey = countryIdObject.GetValue("countryExternalKey", StringComparison.InvariantCulture);
                        if (countryExternalKey != null)
                        {
                            string countryExternalKeyCountryCode = countryExternalKey.Value<string>("countryCode");
                            country = this.domain.Countries.CountryExternalKey.Find(countryExternalKeyCountryCode);
                        }

                        if (country != null)
                        {
                            await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                            countryIdObject.Replace(new JValue(country.CountryId));
                        }
                    }

                    var provinceIdObject = jObject.GetValue("provinceId", StringComparison.InvariantCulture) as JObject;
                    if (provinceIdObject != null)
                    {
                        Province province = null;
                        var provinceExternalKey = provinceIdObject.GetValue("provinceExternalKey", StringComparison.InvariantCulture);
                        if (provinceExternalKey != null)
                        {
                            string provinceExternalKeyName = provinceExternalKey.Value<string>("name");
                            string provinceExternalKeyCountryCode = provinceExternalKey.Value<string>("countryCode");
                            province = this.domain.Provinces.ProvinceExternalKey.Find((provinceExternalKeyName, provinceExternalKeyCountryCode));
                        }

                        if (province != null)
                        {
                            await province.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                            provinceIdObject.Replace(new JValue(province.ProvinceId));
                        }
                    }

                    if (buyer == null)
                    {
                        buyer = jObject.ToObject<Buyer>();
                        buyer.Enlist();
                        await buyer.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Buyers.AddAsync(buyer).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Buyers.Add(buyer);
                    }
                    else
                    {
                        buyer.Enlist();
                        await buyer.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        Buyer newBuyer = jObject.ToObject<Buyer>();
                        buyer.Address1 = newBuyer.Address1;
                        buyer.Address2 = newBuyer.Address2;
                        buyer.City = newBuyer.City;
                        buyer.CountryId = newBuyer.CountryId;
                        buyer.DateCreated = newBuyer.DateCreated;
                        buyer.DateModified = newBuyer.DateModified;
                        buyer.Email = newBuyer.Email;
                        buyer.Mnemonic = newBuyer.Mnemonic;
                        buyer.Name = newBuyer.Name;
                        buyer.Phone = newBuyer.Phone;
                        buyer.PostalCode = newBuyer.PostalCode;
                        buyer.PrimaryContact = newBuyer.PrimaryContact;
                        buyer.ProvinceId = newBuyer.ProvinceId;
                        using (TransactionScope updateScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            this.domainContext.Buyers.Update(buyer);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            updateScope.Complete();
                        }

                        this.domain.Buyers.Update(buyer);
                    }

                    transactionScope.Complete();
                    return this.Ok(new { buyer.Address1, buyer.Address2, buyer.BuyerId, buyer.City, buyer.CountryId, buyer.DateCreated, buyer.DateModified, buyer.Email, buyer.Mnemonic, buyer.Name, buyer.Phone, buyer.PostalCode, buyer.PrimaryContact, buyer.ProvinceId, buyer.RowVersion });
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }
                catch (FormatException)
                {
                    return this.BadRequest();
                }
            }
        }
    }

    /// <summary>
    /// Controller for <see cref="Country"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class CountriesController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public CountriesController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes all the <see cref="Country"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteCountries()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Countries.Enlist();
                this.domain.Countries.CountryExternalKey.Enlist();
                this.domain.Countries.CountryKey.Enlist();
                await this.domain.Countries.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Country country in this.domain.Countries.ToList())
                    {
                        await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Countries.Remove(country);
                        this.domainContext.Countries.Remove(country);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Country"/> record.
        /// </summary>
        /// <param name="countryId">The CountryId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{countryId}")]
        public async Task<IActionResult> DeleteCountry([FromRoute] int countryId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Country country = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    country = this.domain.Countries.CountryKey.Find(countryId);
                }
                finally
                {
                    this.domain.Countries.CountryKey.Lock.ExitReadLock();
                }

                if (country == null)
                {
                    return this.NotFound();
                }

                this.domain.Countries.Enlist();
                this.domain.Countries.CountryExternalKey.Enlist();
                this.domain.Countries.CountryKey.Enlist();
                await this.domain.Countries.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                country.Enlist();
                await country.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Countries.Remove(country);
                try
                {
                    this.domainContext.Countries.Remove(country);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Country"/> record.
        /// </summary>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("countryExternalKey/{countryCode}")]
        public async Task<IActionResult> DeleteCountryByCountryExternalKey([FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Country country = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    country = this.domain.Countries.CountryExternalKey.Find(countryCode);
                }
                finally
                {
                    this.domain.Countries.CountryExternalKey.Lock.ExitReadLock();
                }

                if (country == null)
                {
                    return this.NotFound();
                }

                this.domain.Countries.Enlist();
                this.domain.Countries.CountryExternalKey.Enlist();
                this.domain.Countries.CountryKey.Enlist();
                await this.domain.Countries.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                country.Enlist();
                await country.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Countries.Remove(country);
                try
                {
                    this.domainContext.Countries.Remove(country);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Country"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Country"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetCountries()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> countries = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Countries.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Country country in this.domain.Countries)
                {
                    await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    countries.Add(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
                }

                return this.Ok(countries);
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Country"/> record.
        /// </summary>
        /// <param name="countryId">The CountryId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{countryId}")]
        public async Task<IActionResult> GetCountry([FromRoute] int countryId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Country country = this.domain.Countries.CountryKey.Find(countryId);
                if (country == null)
                {
                    return this.NotFound();
                }

                await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Country"/> record.
        /// </summary>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("countryExternalKey/{countryCode}")]
        public async Task<IActionResult> GetCountryByCountryExternalKey([FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Country country = this.domain.Countries.CountryExternalKey.Find(countryCode);
                if (country == null)
                {
                    return this.NotFound();
                }

                await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
            }
        }

        /// <summary>
        /// Put the <see cref="Country"/> record into the domain.
        /// </summary>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <param name="jObject">The JSON record.</param>
        /// <returns>The result of the PUT verb.</returns>
        [HttpPut("countryExternalKey/{countryCode}")]
        public async Task<IActionResult> PutCountryByCountryExternalKey([FromRoute] string countryCode, [FromBody] JObject jObject)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                Country country = null;
                try
                {
                    await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    country = this.domain.Countries.CountryExternalKey.Find(countryCode);
                }
                finally
                {
                    this.domain.Countries.CountryExternalKey.Lock.ExitReadLock();
                }

                try
                {
                    this.domain.Countries.Enlist();
                    this.domain.Countries.CountryExternalKey.Enlist();
                    this.domain.Countries.CountryKey.Enlist();
                    await this.domain.Countries.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    if (country == null)
                    {
                        country = jObject.ToObject<Country>();
                        country.Enlist();
                        await country.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Countries.AddAsync(country).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Countries.Add(country);
                    }
                    else
                    {
                        country.Enlist();
                        await country.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        Country newCountry = jObject.ToObject<Country>();
                        country.CountryCode = newCountry.CountryCode;
                        country.Name = newCountry.Name;
                        using (TransactionScope updateScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            this.domainContext.Countries.Update(country);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            updateScope.Complete();
                        }

                        this.domain.Countries.Update(country);
                    }

                    transactionScope.Complete();
                    return this.Ok(new { country.CountryCode, country.CountryId, country.Name, country.RowVersion });
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }
                catch (FormatException)
                {
                    return this.BadRequest();
                }
            }
        }
    }

    /// <summary>
    /// Controller for <see cref="Offering"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class OfferingsController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingsController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public OfferingsController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes a specific <see cref="Offering"/> record.
        /// </summary>
        /// <param name="offeringId">The OfferingId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{offeringId}")]
        public async Task<IActionResult> DeleteOffering([FromRoute] int offeringId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Offering offering = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    offering = this.domain.Offerings.OfferingKey.Find(offeringId);
                }
                finally
                {
                    this.domain.Offerings.OfferingKey.Lock.ExitReadLock();
                }

                if (offering == null)
                {
                    return this.NotFound();
                }

                this.domain.Offerings.Enlist();
                this.domain.Offerings.OfferingExternalKey.Enlist();
                this.domain.Offerings.OfferingKey.Enlist();
                await this.domain.Offerings.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                offering.Enlist();
                await offering.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Offerings.Remove(offering);
                try
                {
                    this.domainContext.Offerings.Remove(offering);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Offering"/> record.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("offeringExternalKey/{mnemonic}")]
        public async Task<IActionResult> DeleteOfferingByOfferingExternalKey([FromRoute] string mnemonic)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Offering offering = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Offerings.OfferingExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    offering = this.domain.Offerings.OfferingExternalKey.Find(mnemonic);
                }
                finally
                {
                    this.domain.Offerings.OfferingExternalKey.Lock.ExitReadLock();
                }

                if (offering == null)
                {
                    return this.NotFound();
                }

                this.domain.Offerings.Enlist();
                this.domain.Offerings.OfferingExternalKey.Enlist();
                this.domain.Offerings.OfferingKey.Enlist();
                await this.domain.Offerings.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                offering.Enlist();
                await offering.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Offerings.Remove(offering);
                try
                {
                    this.domainContext.Offerings.Remove(offering);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
            }
        }

        /// <summary>
        /// Deletes all the <see cref="Offering"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteOfferings()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Offerings.Enlist();
                this.domain.Offerings.OfferingExternalKey.Enlist();
                this.domain.Offerings.OfferingKey.Enlist();
                await this.domain.Offerings.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Offering offering in this.domain.Offerings.ToList())
                    {
                        await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Offerings.Remove(offering);
                        this.domainContext.Offerings.Remove(offering);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Offering"/> record.
        /// </summary>
        /// <param name="offeringId">The OfferingId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{offeringId}")]
        public async Task<IActionResult> GetOffering([FromRoute] int offeringId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Offering offering = this.domain.Offerings.OfferingKey.Find(offeringId);
                if (offering == null)
                {
                    return this.NotFound();
                }

                await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Offering"/> record.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("offeringExternalKey/{mnemonic}")]
        public async Task<IActionResult> GetOfferingByOfferingExternalKey([FromRoute] string mnemonic)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Offerings.OfferingExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Offering offering = this.domain.Offerings.OfferingExternalKey.Find(mnemonic);
                if (offering == null)
                {
                    return this.NotFound();
                }

                await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Offering"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Offering"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetOfferings()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> offerings = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Offerings.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Offering offering in this.domain.Offerings)
                {
                    await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    offerings.Add(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
                }

                return this.Ok(offerings);
            }
        }

        /// <summary>
        /// Put the <see cref="Offering"/> record into the domain.
        /// </summary>
        /// <param name="mnemonic">The Mnemonic identifier.</param>
        /// <param name="jObject">The JSON record.</param>
        /// <returns>The result of the PUT verb.</returns>
        [HttpPut("offeringExternalKey/{mnemonic}")]
        public async Task<IActionResult> PutOfferingByOfferingExternalKey([FromRoute] string mnemonic, [FromBody] JObject jObject)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                Offering offering = null;
                try
                {
                    await this.domain.Offerings.OfferingExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    offering = this.domain.Offerings.OfferingExternalKey.Find(mnemonic);
                }
                finally
                {
                    this.domain.Offerings.OfferingExternalKey.Lock.ExitReadLock();
                }

                try
                {
                    this.domain.Offerings.Enlist();
                    this.domain.Offerings.OfferingExternalKey.Enlist();
                    this.domain.Offerings.OfferingKey.Enlist();
                    await this.domain.Offerings.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Offerings.OfferingExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Offerings.OfferingKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    if (offering == null)
                    {
                        offering = jObject.ToObject<Offering>();
                        offering.Enlist();
                        await offering.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Offerings.AddAsync(offering).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Offerings.Add(offering);
                    }
                    else
                    {
                        offering.Enlist();
                        await offering.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        Offering newOffering = jObject.ToObject<Offering>();
                        offering.Age = newOffering.Age;
                        offering.Coupon = newOffering.Coupon;
                        offering.DateCreated = newOffering.DateCreated;
                        offering.DateModified = newOffering.DateModified;
                        offering.Description = newOffering.Description;
                        offering.FaceValue = newOffering.FaceValue;
                        offering.FicoScore = newOffering.FicoScore;
                        offering.MarketValue = newOffering.MarketValue;
                        offering.MaturityDate = newOffering.MaturityDate;
                        offering.Mnemonic = newOffering.Mnemonic;
                        offering.Name = newOffering.Name;
                        using (TransactionScope updateScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            this.domainContext.Offerings.Update(offering);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            updateScope.Complete();
                        }

                        this.domain.Offerings.Update(offering);
                    }

                    transactionScope.Complete();
                    return this.Ok(new { offering.Age, offering.Coupon, offering.DateCreated, offering.DateModified, offering.Description, offering.FaceValue, offering.FicoScore, offering.MarketValue, offering.MaturityDate, offering.Mnemonic, offering.Name, offering.OfferingId, offering.RowVersion });
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }
                catch (FormatException)
                {
                    return this.BadRequest();
                }
            }
        }
    }

    /// <summary>
    /// Controller for <see cref="Province"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class ProvincesController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvincesController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public ProvincesController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes a specific <see cref="Province"/> record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{provinceId}")]
        public async Task<IActionResult> DeleteProvince([FromRoute] int provinceId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Province province = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    province = this.domain.Provinces.ProvinceKey.Find(provinceId);
                }
                finally
                {
                    this.domain.Provinces.ProvinceKey.Lock.ExitReadLock();
                }

                if (province == null)
                {
                    return this.NotFound();
                }

                this.domain.Provinces.Enlist();
                this.domain.Provinces.ProvinceExternalKey.Enlist();
                this.domain.Provinces.ProvinceKey.Enlist();
                this.domain.Provinces.CountryProvinceKey.Enlist();
                this.domain.Provinces.RegionProvinceRegionIdKey.Enlist();
                await this.domain.Provinces.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.CountryProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.RegionProvinceRegionIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                province.Enlist();
                await province.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Provinces.Remove(province);
                try
                {
                    this.domainContext.Provinces.Remove(province);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Province"/> record.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("provinceExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> DeleteProvinceByProvinceExternalKey([FromRoute] string name, [FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Province province = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Provinces.ProvinceExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    province = this.domain.Provinces.ProvinceExternalKey.Find((name, countryCode));
                }
                finally
                {
                    this.domain.Provinces.ProvinceExternalKey.Lock.ExitReadLock();
                }

                if (province == null)
                {
                    return this.NotFound();
                }

                this.domain.Provinces.Enlist();
                this.domain.Provinces.ProvinceExternalKey.Enlist();
                this.domain.Provinces.ProvinceKey.Enlist();
                this.domain.Provinces.CountryProvinceKey.Enlist();
                this.domain.Provinces.RegionProvinceRegionIdKey.Enlist();
                await this.domain.Provinces.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.CountryProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.RegionProvinceRegionIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                province.Enlist();
                await province.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Provinces.Remove(province);
                try
                {
                    this.domainContext.Provinces.Remove(province);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
            }
        }

        /// <summary>
        /// Deletes all the <see cref="Province"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteProvinces()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Provinces.Enlist();
                this.domain.Provinces.ProvinceExternalKey.Enlist();
                this.domain.Provinces.ProvinceKey.Enlist();
                this.domain.Provinces.CountryProvinceKey.Enlist();
                this.domain.Provinces.RegionProvinceRegionIdKey.Enlist();
                await this.domain.Provinces.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.ProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.CountryProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Provinces.RegionProvinceRegionIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Province province in this.domain.Provinces.ToList())
                    {
                        await province.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Provinces.Remove(province);
                        this.domainContext.Provinces.Remove(province);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Province"/> record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{provinceId}")]
        public async Task<IActionResult> GetProvince([FromRoute] int provinceId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Provinces.ProvinceKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Province province = this.domain.Provinces.ProvinceKey.Find(provinceId);
                if (province == null)
                {
                    return this.NotFound();
                }

                await province.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Province"/> record.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("provinceExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> GetProvinceByProvinceExternalKey([FromRoute] string name, [FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Provinces.ProvinceExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Province province = this.domain.Provinces.ProvinceExternalKey.Find((name, countryCode));
                if (province == null)
                {
                    return this.NotFound();
                }

                await province.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Province"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Province"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetProvinces()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> provinces = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Provinces.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Province province in this.domain.Provinces)
                {
                    await province.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    provinces.Add(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
                }

                return this.Ok(provinces);
            }
        }

        /// <summary>
        /// Put the <see cref="Province"/> record into the domain.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <param name="jObject">The JSON record.</param>
        /// <returns>The result of the PUT verb.</returns>
        [HttpPut("provinceExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> PutProvinceByProvinceExternalKey([FromRoute] string name, [FromRoute] string countryCode, [FromBody] JObject jObject)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                Province province = null;
                try
                {
                    await this.domain.Provinces.ProvinceExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    province = this.domain.Provinces.ProvinceExternalKey.Find((name, countryCode));
                }
                finally
                {
                    this.domain.Provinces.ProvinceExternalKey.Lock.ExitReadLock();
                }

                try
                {
                    this.domain.Provinces.Enlist();
                    this.domain.Provinces.ProvinceExternalKey.Enlist();
                    this.domain.Provinces.ProvinceKey.Enlist();
                    this.domain.Provinces.CountryProvinceKey.Enlist();
                    this.domain.Provinces.RegionProvinceRegionIdKey.Enlist();
                    await this.domain.Provinces.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.ProvinceExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.ProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.CountryProvinceKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Provinces.RegionProvinceRegionIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Regions.RegionExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    var countryIdObject = jObject.GetValue("countryId", StringComparison.InvariantCulture) as JObject;
                    if (countryIdObject != null)
                    {
                        Country country = null;
                        var countryExternalKey = countryIdObject.GetValue("countryExternalKey", StringComparison.InvariantCulture);
                        if (countryExternalKey != null)
                        {
                            string countryExternalKeyCountryCode = countryExternalKey.Value<string>("countryCode");
                            country = this.domain.Countries.CountryExternalKey.Find(countryExternalKeyCountryCode);
                        }

                        if (country != null)
                        {
                            await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                            countryIdObject.Replace(new JValue(country.CountryId));
                        }
                    }

                    var regionIdObject = jObject.GetValue("regionId", StringComparison.InvariantCulture) as JObject;
                    if (regionIdObject != null)
                    {
                        Region region = null;
                        var regionExternalKey = regionIdObject.GetValue("regionExternalKey", StringComparison.InvariantCulture);
                        if (regionExternalKey != null)
                        {
                            string regionExternalKeyName = regionExternalKey.Value<string>("name");
                            string regionExternalKeyCountryCode = regionExternalKey.Value<string>("countryCode");
                            region = this.domain.Regions.RegionExternalKey.Find((regionExternalKeyName, regionExternalKeyCountryCode));
                        }

                        if (region != null)
                        {
                            await region.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                            regionIdObject.Replace(new JValue(region.RegionId));
                        }
                    }

                    if (province == null)
                    {
                        province = jObject.ToObject<Province>();
                        province.Enlist();
                        await province.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Provinces.AddAsync(province).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Provinces.Add(province);
                    }
                    else
                    {
                        province.Enlist();
                        await province.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        Province newProvince = jObject.ToObject<Province>();
                        province.CountryCode = newProvince.CountryCode;
                        province.CountryId = newProvince.CountryId;
                        province.Name = newProvince.Name;
                        province.RegionId = newProvince.RegionId;
                        province.Short = newProvince.Short;
                        using (TransactionScope updateScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            this.domainContext.Provinces.Update(province);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            updateScope.Complete();
                        }

                        this.domain.Provinces.Update(province);
                    }

                    transactionScope.Complete();
                    return this.Ok(new { province.CountryCode, province.CountryId, province.Name, province.ProvinceId, province.RegionId, province.Short, province.RowVersion });
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }
                catch (FormatException)
                {
                    return this.BadRequest();
                }
            }
        }
    }

    /// <summary>
    /// Controller for <see cref="Region"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class RegionsController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegionsController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public RegionsController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes a specific <see cref="Region"/> record.
        /// </summary>
        /// <param name="regionId">The RegionId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{regionId}")]
        public async Task<IActionResult> DeleteRegion([FromRoute] int regionId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Region region = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    region = this.domain.Regions.RegionKey.Find(regionId);
                }
                finally
                {
                    this.domain.Regions.RegionKey.Lock.ExitReadLock();
                }

                if (region == null)
                {
                    return this.NotFound();
                }

                this.domain.Regions.Enlist();
                this.domain.Regions.RegionExternalKey.Enlist();
                this.domain.Regions.RegionKey.Enlist();
                this.domain.Regions.CountryRegionKey.Enlist();
                await this.domain.Regions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.CountryRegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                region.Enlist();
                await region.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Regions.Remove(region);
                try
                {
                    this.domainContext.Regions.Remove(region);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
            }
        }

        /// <summary>
        /// Deletes a specific <see cref="Region"/> record.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("regionExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> DeleteRegionByRegionExternalKey([FromRoute] string name, [FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Region region = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Regions.RegionExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    region = this.domain.Regions.RegionExternalKey.Find((name, countryCode));
                }
                finally
                {
                    this.domain.Regions.RegionExternalKey.Lock.ExitReadLock();
                }

                if (region == null)
                {
                    return this.NotFound();
                }

                this.domain.Regions.Enlist();
                this.domain.Regions.RegionExternalKey.Enlist();
                this.domain.Regions.RegionKey.Enlist();
                this.domain.Regions.CountryRegionKey.Enlist();
                await this.domain.Regions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.CountryRegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                region.Enlist();
                await region.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Regions.Remove(region);
                try
                {
                    this.domainContext.Regions.Remove(region);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
            }
        }

        /// <summary>
        /// Deletes all the <see cref="Region"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteRegions()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Regions.Enlist();
                this.domain.Regions.RegionExternalKey.Enlist();
                this.domain.Regions.RegionKey.Enlist();
                this.domain.Regions.CountryRegionKey.Enlist();
                await this.domain.Regions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.RegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Regions.CountryRegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Region region in this.domain.Regions.ToList())
                    {
                        await region.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Regions.Remove(region);
                        this.domainContext.Regions.Remove(region);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Region"/> record.
        /// </summary>
        /// <param name="regionId">The RegionId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{regionId}")]
        public async Task<IActionResult> GetRegion([FromRoute] int regionId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Regions.RegionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Region region = this.domain.Regions.RegionKey.Find(regionId);
                if (region == null)
                {
                    return this.NotFound();
                }

                await region.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Region"/> record.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("regionExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> GetRegionByRegionExternalKey([FromRoute] string name, [FromRoute] string countryCode)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Regions.RegionExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Region region = this.domain.Regions.RegionExternalKey.Find((name, countryCode));
                if (region == null)
                {
                    return this.NotFound();
                }

                await region.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Region"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Region"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetRegions()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> regions = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Regions.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Region region in this.domain.Regions)
                {
                    await region.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    regions.Add(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
                }

                return this.Ok(regions);
            }
        }

        /// <summary>
        /// Put the <see cref="Region"/> record into the domain.
        /// </summary>
        /// <param name="name">The Name identifier.</param>
        /// <param name="countryCode">The CountryCode identifier.</param>
        /// <param name="jObject">The JSON record.</param>
        /// <returns>The result of the PUT verb.</returns>
        [HttpPut("regionExternalKey/{name}/{countryCode}")]
        public async Task<IActionResult> PutRegionByRegionExternalKey([FromRoute] string name, [FromRoute] string countryCode, [FromBody] JObject jObject)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                Region region = null;
                try
                {
                    await this.domain.Regions.RegionExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    region = this.domain.Regions.RegionExternalKey.Find((name, countryCode));
                }
                finally
                {
                    this.domain.Regions.RegionExternalKey.Lock.ExitReadLock();
                }

                try
                {
                    this.domain.Regions.Enlist();
                    this.domain.Regions.RegionExternalKey.Enlist();
                    this.domain.Regions.RegionKey.Enlist();
                    this.domain.Regions.CountryRegionKey.Enlist();
                    await this.domain.Regions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Regions.RegionExternalKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Regions.RegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Regions.CountryRegionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    await this.domain.Countries.CountryKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    var countryIdObject = jObject.GetValue("countryId", StringComparison.InvariantCulture) as JObject;
                    if (countryIdObject != null)
                    {
                        Country country = null;
                        var countryExternalKey = countryIdObject.GetValue("countryExternalKey", StringComparison.InvariantCulture);
                        if (countryExternalKey != null)
                        {
                            string countryExternalKeyCountryCode = countryExternalKey.Value<string>("countryCode");
                            country = this.domain.Countries.CountryExternalKey.Find(countryExternalKeyCountryCode);
                        }

                        if (country != null)
                        {
                            await country.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                            countryIdObject.Replace(new JValue(country.CountryId));
                        }
                    }

                    if (region == null)
                    {
                        region = jObject.ToObject<Region>();
                        region.Enlist();
                        await region.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Regions.AddAsync(region).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Regions.Add(region);
                    }
                    else
                    {
                        region.Enlist();
                        await region.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        Region newRegion = jObject.ToObject<Region>();
                        region.CountryCode = newRegion.CountryCode;
                        region.CountryId = newRegion.CountryId;
                        region.Name = newRegion.Name;
                        using (TransactionScope updateScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            this.domainContext.Regions.Update(region);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            updateScope.Complete();
                        }

                        this.domain.Regions.Update(region);
                    }

                    transactionScope.Complete();
                    return this.Ok(new { region.CountryCode, region.CountryId, region.Name, region.RegionId, region.RowVersion });
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }
                catch (FormatException)
                {
                    return this.BadRequest();
                }
            }
        }
    }

    /// <summary>
    /// Controller for <see cref="Subscription"/> records.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public partial class SubscriptionsController : ControllerBase
    {
        private Domain domain;
        private DomainContext domainContext;
        private int lockTimeout;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsController"/> class.
        /// </summary>
        /// <param name="configuration">Configuration settings.</param>
        /// <param name="domain">The data model.</param>
        /// <param name="domainContext">The DbContext for the domain.</param>
        public SubscriptionsController(IConfiguration configuration, Domain domain, DomainContext domainContext)
        {
            this.domain = domain;
            this.domainContext = domainContext;
            this.lockTimeout = configuration.GetValue<int>("LockTimeout", Timeout.Infinite);
        }

        /// <summary>
        /// Deletes a specific <see cref="Subscription"/> record.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId identifier.</param>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete("{subscriptionId}")]
        public async Task<IActionResult> DeleteSubscription([FromRoute] int subscriptionId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            Subscription subscription = null;
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    await this.domain.Subscriptions.SubscriptionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    subscription = this.domain.Subscriptions.SubscriptionKey.Find(subscriptionId);
                }
                finally
                {
                    this.domain.Subscriptions.SubscriptionKey.Lock.ExitReadLock();
                }

                if (subscription == null)
                {
                    return this.NotFound();
                }

                this.domain.Subscriptions.Enlist();
                this.domain.Subscriptions.SubscriptionKey.Enlist();
                this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Enlist();
                this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Enlist();
                await this.domain.Subscriptions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.SubscriptionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                subscription.Enlist();
                await subscription.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                this.domain.Subscriptions.Remove(subscription);
                try
                {
                    this.domainContext.Subscriptions.Remove(subscription);
                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok(new { subscription.BuyerId, subscription.OfferingId, subscription.SubscriptionId, subscription.SubscriptionValue, subscription.RowVersion });
            }
        }

        /// <summary>
        /// Deletes all the <see cref="Subscription"/> records.
        /// </summary>
        /// <returns>The result of the DELETE verb.</returns>
        [HttpDelete]
        public async Task<IActionResult> DeleteSubscriptions()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                this.domain.Subscriptions.Enlist();
                this.domain.Subscriptions.SubscriptionKey.Enlist();
                this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Enlist();
                this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Enlist();
                await this.domain.Subscriptions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.SubscriptionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                try
                {
                    foreach (Subscription subscription in this.domain.Subscriptions.ToList())
                    {
                        await subscription.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        this.domain.Subscriptions.Remove(subscription);
                        this.domainContext.Subscriptions.Remove(subscription);
                    }

                    await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                }
                catch (DbUpdateException)
                {
                    return this.BadRequest();
                }

                transactionScope.Complete();
                return this.Ok();
            }
        }

        /// <summary>
        /// Gets a specific <see cref="Subscription"/> record.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId identifier.</param>
        /// <returns>The result of the GET verb.</returns>
        [HttpGet("{subscriptionId}")]
        public async Task<IActionResult> GetSubscription([FromRoute] int subscriptionId)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Subscriptions.SubscriptionKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                Subscription subscription = this.domain.Subscriptions.SubscriptionKey.Find(subscriptionId);
                if (subscription == null)
                {
                    return this.NotFound();
                }

                await subscription.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                return this.Ok(new { subscription.BuyerId, subscription.OfferingId, subscription.SubscriptionId, subscription.SubscriptionValue, subscription.RowVersion });
            }
        }

        /// <summary>
        /// Gets a list of <see cref="Subscription"/> records.
        /// </summary>
        /// <returns>A list of <see cref="Subscription"/> records.</returns>
        [HttpGet]
        public async Task<IActionResult> GetSubscriptions()
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            List<object> subscriptions = new List<object>();
            using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                await this.domain.Subscriptions.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                foreach (Subscription subscription in this.domain.Subscriptions)
                {
                    await subscription.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                    subscriptions.Add(new { subscription.BuyerId, subscription.OfferingId, subscription.SubscriptionId, subscription.SubscriptionValue, subscription.RowVersion });
                }

                return this.Ok(subscriptions);
            }
        }

        /// <summary>
        /// Post the <see cref="Subscription"/> record into the domain.
        /// </summary>
        /// <param name="object">The message body.</param>
        /// <returns>The result of the POST verb.</returns>
        [HttpPost]
        public async Task<IActionResult> PostSubscription([FromBody] object @object)
        {
            if (!this.ModelState.IsValid)
            {
                return this.BadRequest(this.ModelState);
            }

            JObject jObject = @object as JObject;
            if (jObject != null)
            {
                using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                {
                    try
                    {
                        this.domain.Subscriptions.Enlist();
                        this.domain.Subscriptions.SubscriptionKey.Enlist();
                        this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Enlist();
                        this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Enlist();
                        await this.domain.Subscriptions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.SubscriptionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Buyers.BuyerExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Offerings.OfferingExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        var buyerIdObject = jObject.GetValue("buyerId", StringComparison.InvariantCulture) as JObject;
                        if (buyerIdObject != null)
                        {
                            Buyer buyer = null;
                            var buyerExternalKey = buyerIdObject.GetValue("buyerExternalKey", StringComparison.InvariantCulture);
                            if (buyerExternalKey != null)
                            {
                                string buyerExternalKeyMnemonic = buyerExternalKey.Value<string>("mnemonic");
                                buyer = this.domain.Buyers.BuyerExternalKey.Find(buyerExternalKeyMnemonic);
                            }

                            if (buyer != null)
                            {
                                try
                                {
                                    await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                                    buyerIdObject.Replace(new JValue(buyer.BuyerId));
                                }
                                finally
                                {
                                    buyer.Lock.ExitReadLock();
                                }
                            }
                        }

                        var offeringIdObject = jObject.GetValue("offeringId", StringComparison.InvariantCulture) as JObject;
                        if (offeringIdObject != null)
                        {
                            Offering offering = null;
                            var offeringExternalKey = offeringIdObject.GetValue("offeringExternalKey", StringComparison.InvariantCulture);
                            if (offeringExternalKey != null)
                            {
                                string offeringExternalKeyMnemonic = offeringExternalKey.Value<string>("mnemonic");
                                offering = this.domain.Offerings.OfferingExternalKey.Find(offeringExternalKeyMnemonic);
                            }

                            if (offering != null)
                            {
                                try
                                {
                                    await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                                    offeringIdObject.Replace(new JValue(offering.OfferingId));
                                }
                                finally
                                {
                                    offering.Lock.ExitReadLock();
                                }
                            }
                        }

                        Subscription subscription = jObject.ToObject<Subscription>();
                        subscription.Enlist();
                        await subscription.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                        {
                            await this.domainContext.Subscriptions.AddAsync(subscription).ConfigureAwait(false);
                            await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                            additionScope.Complete();
                        }

                        this.domain.Subscriptions.Add(subscription);
                        transactionScope.Complete();
                        return this.Ok(new { subscription.BuyerId, subscription.OfferingId, subscription.SubscriptionId, subscription.SubscriptionValue, subscription.RowVersion });
                    }
                    catch (DbUpdateException)
                    {
                        return this.BadRequest();
                    }
                    catch (FormatException)
                    {
                        return this.BadRequest();
                    }
                }
            }

            JArray jArray = @object as JArray;
            if (jArray != null)
            {
                using (TransactionScope transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                {
                    try
                    {
                        this.domain.Subscriptions.Enlist();
                        this.domain.Subscriptions.SubscriptionKey.Enlist();
                        this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Enlist();
                        this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Enlist();
                        await this.domain.Subscriptions.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.SubscriptionKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.BuyerSubscriptionBuyerIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Subscriptions.OfferingSubscriptionOfferingIdKey.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Buyers.BuyerExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Buyers.BuyerKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Offerings.OfferingExternalKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        await this.domain.Offerings.OfferingKey.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                        foreach (JObject innerJObject in jArray)
                        {
                            var buyerIdObject = innerJObject.GetValue("buyerId", StringComparison.InvariantCulture) as JObject;
                            if (buyerIdObject != null)
                            {
                                Buyer buyer = null;
                                var buyerExternalKey = buyerIdObject.GetValue("buyerExternalKey", StringComparison.InvariantCulture);
                                if (buyerExternalKey != null)
                                {
                                    string buyerExternalKeyMnemonic = buyerExternalKey.Value<string>("mnemonic");
                                    buyer = this.domain.Buyers.BuyerExternalKey.Find(buyerExternalKeyMnemonic);
                                }

                                if (buyer != null)
                                {
                                    try
                                    {
                                        await buyer.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                                        buyerIdObject.Replace(new JValue(buyer.BuyerId));
                                    }
                                    finally
                                    {
                                        buyer.Lock.ExitReadLock();
                                    }
                                }
                            }

                            var offeringIdObject = innerJObject.GetValue("offeringId", StringComparison.InvariantCulture) as JObject;
                            if (offeringIdObject != null)
                            {
                                Offering offering = null;
                                var offeringExternalKey = offeringIdObject.GetValue("offeringExternalKey", StringComparison.InvariantCulture);
                                if (offeringExternalKey != null)
                                {
                                    string offeringExternalKeyMnemonic = offeringExternalKey.Value<string>("mnemonic");
                                    offering = this.domain.Offerings.OfferingExternalKey.Find(offeringExternalKeyMnemonic);
                                }

                                if (offering != null)
                                {
                                    try
                                    {
                                        await offering.Lock.EnterReadLockAsync(this.lockTimeout).ConfigureAwait(false);
                                        offeringIdObject.Replace(new JValue(offering.OfferingId));
                                    }
                                    finally
                                    {
                                        offering.Lock.ExitReadLock();
                                    }
                                }
                            }

                            Subscription subscription = innerJObject.ToObject<Subscription>();
                            subscription.Enlist();
                            await subscription.Lock.EnterWriteLockAsync(this.lockTimeout).ConfigureAwait(false);
                            using (TransactionScope additionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                            {
                                await this.domainContext.Subscriptions.AddAsync(subscription).ConfigureAwait(false);
                                await this.domainContext.SaveChangesAsync().ConfigureAwait(false);
                                additionScope.Complete();
                            }

                            this.domain.Subscriptions.Add(subscription);
                        }

                        transactionScope.Complete();
                        return this.Ok();
                    }
                    catch (DbUpdateException)
                    {
                        return this.BadRequest();
                    }
                    catch (FormatException)
                    {
                        return this.BadRequest();
                    }
                }
            }

            return this.BadRequest();
        }
    }
}